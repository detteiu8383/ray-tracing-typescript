var P=Object.defineProperty;var j=(o,t,e)=>t in o?P(o,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[t]=e;var g=(o,t,e)=>(j(o,typeof t!="symbol"?t+"":t,e),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))s(r);new MutationObserver(r=>{for(const a of r)if(a.type==="childList")for(const c of a.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&s(c)}).observe(document,{childList:!0,subtree:!0});function e(r){const a={};return r.integrity&&(a.integrity=r.integrity),r.referrerpolicy&&(a.referrerPolicy=r.referrerpolicy),r.crossorigin==="use-credentials"?a.credentials="include":r.crossorigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function s(r){if(r.ep)return;r.ep=!0;const a=e(r);fetch(r.href,a)}})();class n{constructor(t,e,s){g(this,"e",[0,0,0]);this.e[0]=t,this.e[1]=e,this.e[2]=s}static add(t,e){return new n(t.e[0]+e.e[0],t.e[1]+e.e[1],t.e[2]+e.e[2])}static sub(t,e){return new n(t.e[0]-e.e[0],t.e[1]-e.e[1],t.e[2]-e.e[2])}static scale(t,e){return new n(t.e[0]*e,t.e[1]*e,t.e[2]*e)}static mul(t,e){return new n(t.e[0]*e.e[0],t.e[1]*e.e[1],t.e[2]*e.e[2])}static div(t,e){return new n(t.e[0]/e,t.e[1]/e,t.e[2]/e)}static pow(t,e){return new n(Math.pow(t.e[0],e),Math.pow(t.e[1],e),Math.pow(t.e[2],e))}static mag(t){return Math.sqrt(n.lengthSquared(t))}static lengthSquared(t){return t.e[0]*t.e[0]+t.e[1]*t.e[1]+t.e[2]*t.e[2]}static dot(t,e){return t.e[0]*e.e[0]+t.e[1]*e.e[1]+t.e[2]*e.e[2]}static cross(t,e){return new n(t.e[1]*e.e[2]-t.e[2]*e.e[1],t.e[2]*e.e[0]-t.e[0]*e.e[2],t.e[0]*e.e[1]-t.e[1]*e.e[0])}static normalize(t){const e=n.mag(t);return e===0?new n(0,0,0):n.div(t,e)}static randomUnitVector(){const t=Math.random()*2*Math.PI,e=1-2*Math.random(),s=Math.sqrt(1-e*e);return new n(s*Math.cos(t),s*Math.sin(t),e)}static reflect(t,e){return n.sub(t,n.scale(e,2*n.dot(t,e)))}}class y{constructor(t,e){this.origin=t,this.direction=e}at(t){return n.add(this.origin,n.scale(this.direction,t))}}class F{constructor(t,e,s){g(this,"lowerLeftCorner");g(this,"horizontal");g(this,"vertical");this.origin=t;const r=s*e,a=1;this.horizontal=new n(r,0,0),this.vertical=new n(0,e,0),this.lowerLeftCorner=n.sub(n.sub(n.sub(t,n.div(this.horizontal,2)),n.div(this.vertical,2)),new n(0,0,a))}getRay(t,e){return new y(this.origin,n.sub(n.add(n.add(this.lowerLeftCorner,n.scale(this.horizontal,t)),n.scale(this.vertical,e)),this.origin))}}class i extends n{constructor(t,e,s){super(t,e,s)}static legalize(t){return new i(Math.min(Math.max(t.e[0],0),1),Math.min(Math.max(t.e[1],0),1),Math.min(Math.max(t.e[2],0),1))}static writeColor(t,e,s,r){const a=i.div(t,r),c=i.pow(a,1/2.2),l=i.scale(i.legalize(c),255);s[e]=l.e[0],s[e+1]=l.e[1],s[e+2]=l.e[2],s[e+3]=255}}class N{constructor(t){g(this,"objects",[]);t&&(this.objects=t)}hit(t,e,s){let r=s,a=null;for(const c of this.objects){const l=c.hit(t,e,r);l&&(r=l.t,a=l)}return a}add(t){this.objects.push(t)}clear(){this.objects=[]}}class M{constructor(t,e,s){this.center=t,this.radius=e,this.material=s}hit(t,e,s){const r=n.sub(t.origin,this.center),a=n.lengthSquared(t.direction),c=n.dot(r,t.direction),l=n.lengthSquared(r)-this.radius*this.radius,b=c*c-a*l;if(b>0){const w=Math.sqrt(b),h=(-c-w)/a;if(h<s&&h>e){const m=t.at(h),d=n.div(n.sub(m,this.center),this.radius),u=this.radius>=0;return{point:m,normal:u?d:n.scale(d,-1),material:this.material,t:h,frontFace:u}}const f=(-c+w)/a;if(f<s&&f>e){const m=t.at(f),d=n.div(n.sub(m,this.center),this.radius),u=this.radius<0;return{point:m,normal:u?d:n.scale(d,-1),material:this.material,t:f,frontFace:u}}}return null}}class L{scatter(t,e){return{scattered:!1}}}class x extends L{constructor(t){super(),this.albedo=t}scatter(t,e){const s=n.add(e.normal,n.randomUnitVector()),r=new y(e.point,s);return{scattered:!0,scatteredRay:r,attenuation:this.albedo}}}class R extends L{constructor(t,e=0){super(),this.albedo=t,this.fuzz=e}scatter(t,e){const s=n.reflect(n.normalize(t.direction),e.normal),r=new y(e.point,n.add(s,n.scale(n.randomUnitVector(),this.fuzz))),a=this.albedo;return{scattered:n.dot(r.direction,e.normal)>0,scatteredRay:r,attenuation:a}}}const q=(o,t,e)=>{if(e<=0)return new i(0,0,0);const s=t.hit(o,.001,1/0);if(s){const c=s.material.scatter(o,s);return c.scattered?i.mul(c.attenuation,q(c.scatteredRay,t,e-1)):new i(0,0,0)}const r=n.normalize(o.direction),a=.5*(r.e[1]+1);return i.add(i.scale(new i(1,1,1),1-a),i.scale(new i(.5,.7,1),a))},U=()=>{const o=1.7777777777777777,t=400,e=Math.floor(t/o),s=4,r=new Uint8Array(t*e*s),a=100,c=50,l=new N;l.add(new M(new n(0,0,-1),.5,new x(new i(.7,.3,.3)))),l.add(new M(new n(0,-100.5,-1),100,new x(new i(.8,.8,0)))),l.add(new M(new n(1,0,-1),.5,new R(new i(.8,.6,.2),1))),l.add(new M(new n(-1,0,-1),.5,new R(new i(.8,.8,.8),.3)));const b=new F(new n(0,0,0),2,o);for(let d=e-1;d>=0;d--)for(let u=0;u<t;u++){let p=new i(0,0,0);for(let z=0;z<a;z++){const S=(u+Math.random())/(t-1),D=(d+Math.random())/(e-1),I=b.getRay(S,D);p=i.add(p,q(I,l,c))}const C=((e-d)*t+u)*s;i.writeColor(p,C,r,a)}const w=document.getElementById("canvas");w.width=t,w.height=e;const h=w.getContext("2d");if(h===null)throw new Error("Failed to get context");const f=new Uint8ClampedArray(r),m=new ImageData(f,t,e);h.putImageData(m,0,0)};U();
